#!/bin/bash

# Desktop Commander Standalone Launcher
# Runs Desktop Commander with integrated task manager and sequential thinking
# WITHOUT the MCP Router ecosystem - perfect as a backup
# Includes dynamic memory management

DESKTOP_COMMANDER_DIR="/Users/robertlee/GitHubProjects/DesktopCommanderMCP"
LOG_DIR="$DESKTOP_COMMANDER_DIR/logs"

# Colors
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
BLUE='\033[0;34m'
NC='\033[0m'

# ASCII art header
show_header() {
    echo -e "${BLUE}
█▀▄ █▀▀ █▀ █▄▀ ▀█▀ █▀█ █▀█   █▀▀ █▀█ █▀▄▀█ █▀▄▀█ ▄▀█ █▄░█ █▀▄ █▀▀ █▀█
█▄▀ ██▄ ▄█ █░█ ░█░ █▄█ █▀▀ █ █▄▄ █▄█ █░▀░█ █░▀░█ █▀█ █░▀█ █▄▀ ██▄ █▀▄
      (Standalone Mode - Backup Configuration)
${NC}"
}

# Function to check system memory and display info
check_system_memory() {
    local total_mem=$(sysctl -n hw.memsize | awk '{print int($1/1024/1024)}')
    local available_mem=$(vm_stat | grep "Pages free" | awk '{print $3}' | sed 's/\.//')
    local page_size=$(pagesize)
    local free_mem=$((available_mem * page_size / 1024 / 1024))

    echo "System Memory Status:"
    echo "  Total: ${total_mem}MB"
    echo "  Free: ${free_mem}MB"
    echo "  Used: $((total_mem - free_mem))MB"
    echo ""
}

# Function to get available memory in MB
get_available_memory() {
    local available_mem=$(vm_stat | grep "Pages free" | awk '{print $3}' | sed 's/\.//')
    local page_size=$(pagesize)
    local free_mem=$((available_mem * page_size / 1024 / 1024))

    # Return recommended heap size (75% of free memory, max 4GB)
    local recommended=$((free_mem * 75 / 100))
    if [ $recommended -gt 4096 ]; then
        recommended=4096
    fi

    echo $recommended
}

# Function to calculate dynamic memory allocation
calculate_memory_allocation() {
    local available_mem=$(get_available_memory)
    local recommended_heap=0

    # Determine heap size based on available memory
    if [ "$available_mem" -lt 1024 ]; then
        # Less than 1GB available - minimal mode
        recommended_heap=512
        echo -e "${YELLOW}⚠️ Low memory available. Running in minimal mode.${NC}"
    elif [ "$available_mem" -lt 2048 ]; then
        # 1-2GB available - conservative mode
        recommended_heap=1024
        echo -e "${YELLOW}Running with conservative memory settings.${NC}"
    elif [ "$available_mem" -lt 4096 ]; then
        # 2-4GB available - standard mode
        recommended_heap=2048
        echo -e "${GREEN}Running with standard memory settings.${NC}"
    else
        # 4GB+ available - performance mode
        recommended_heap=4096
        echo -e "${GREEN}Running with performance memory settings.${NC}"
    fi

    echo ""
    echo "Memory Allocation:"
    echo "  Heap Size: ${recommended_heap}MB"
    echo "  V8 Options: --max-old-space-size=$recommended_heap"
    echo ""

    echo $recommended_heap
}

case "$1" in
    test)
        show_header
        echo -e "${BLUE}Testing Desktop Commander in foreground mode...${NC}"
        echo -e "${YELLOW}Press Ctrl+C to stop${NC}"
        echo ""

        # Calculate memory allocation
        echo -e "${BLUE}Checking system resources...${NC}"
        HEAP_SIZE=$(get_available_memory)

        # Determine heap size based on available memory
        if [ "$HEAP_SIZE" -lt 1024 ]; then
            # Less than 1GB available - minimal mode
            HEAP_SIZE=512
            echo -e "${YELLOW}⚠️ Low memory available. Running in minimal mode.${NC}"
        elif [ "$HEAP_SIZE" -lt 2048 ]; then
            # 1-2GB available - conservative mode
            HEAP_SIZE=1024
            echo -e "${YELLOW}Running with conservative memory settings.${NC}"
        elif [ "$HEAP_SIZE" -lt 4096 ]; then
            # 2-4GB available - standard mode
            HEAP_SIZE=2048
            echo -e "${GREEN}Running with standard memory settings.${NC}"
        else
            # 4GB+ available - performance mode
            HEAP_SIZE=4096
            echo -e "${GREEN}Running with performance memory settings.${NC}"
        fi

        # Set environment variables for dynamic memory
        export NODE_OPTIONS="--max-old-space-size=${HEAP_SIZE}"
        export DESKTOP_COMMANDER_MODE="standalone"
        export MEMORY_MONITOR_INTERVAL=30000
        export MEMORY_THRESHOLD_WARNING=80
        export MEMORY_THRESHOLD_CRITICAL=90
        export AUTO_ADJUST_MEMORY=true

        # Start Desktop Commander in foreground mode
        cd "$DESKTOP_COMMANDER_DIR"
        echo -e "${GREEN}Starting Desktop Commander in foreground mode...${NC}"
        echo "Memory: ${HEAP_SIZE}MB heap allocated"
        echo ""
        node dist/index.js --mode=standalone --dc-standalone-process=true
        ;;

    start)
        show_header
        echo -e "${BLUE}Starting Desktop Commander Standalone...${NC}"
        echo -e "${YELLOW}This runs Desktop Commander with integrated:${NC}"
        echo "  • Task Management"
        echo "  • Sequential Thinking"
        echo "  • File Operations"
        echo "  • Terminal Commands"
        echo "  • Process Management"
        echo "  • Dynamic Memory Management"
        echo ""

        # Kill any existing instances
        pkill -f "node.*DesktopCommanderMCP.*standalone" 2>/dev/null
        pkill -f "node.*dist/index.js" 2>/dev/null
        sleep 1

        # Build if needed
        if [ ! -f "$DESKTOP_COMMANDER_DIR/dist/index.js" ]; then
            echo -e "${YELLOW}Building Desktop Commander...${NC}"
            cd "$DESKTOP_COMMANDER_DIR"
            npm run build
            if [ $? -ne 0 ]; then
                echo -e "${RED}Build failed!${NC}"
                exit 1
            fi
        fi

        # Create logs directory
        mkdir -p "$LOG_DIR"

        # Calculate memory allocation
        echo -e "${BLUE}Checking system resources...${NC}"
        HEAP_SIZE=$(get_available_memory)

        # Determine heap size based on available memory
        if [ "$HEAP_SIZE" -lt 1024 ]; then
            # Less than 1GB available - minimal mode
            HEAP_SIZE=512
            echo -e "${YELLOW}⚠️ Low memory available. Running in minimal mode.${NC}"
        elif [ "$HEAP_SIZE" -lt 2048 ]; then
            # 1-2GB available - conservative mode
            HEAP_SIZE=1024
            echo -e "${YELLOW}Running with conservative memory settings.${NC}"
        elif [ "$HEAP_SIZE" -lt 4096 ]; then
            # 2-4GB available - standard mode
            HEAP_SIZE=2048
            echo -e "${GREEN}Running with standard memory settings.${NC}"
        else
            # 4GB+ available - performance mode
            HEAP_SIZE=4096
            echo -e "${GREEN}Running with performance memory settings.${NC}"
        fi

        # Set environment variables for dynamic memory
        export NODE_OPTIONS="--max-old-space-size=${HEAP_SIZE}"
        export DESKTOP_COMMANDER_MODE="standalone"
        export MEMORY_MONITOR_INTERVAL=30000
        export MEMORY_THRESHOLD_WARNING=80
        export MEMORY_THRESHOLD_CRITICAL=90
        export AUTO_ADJUST_MEMORY=true

        # Make sure logs directory exists and is writable
        mkdir -p "$LOG_DIR"
        touch "$LOG_DIR/test_write_access" && rm "$LOG_DIR/test_write_access"
        if [ $? -ne 0 ]; then
            echo -e "${RED}Error: Cannot write to logs directory!${NC}"
            echo "Please check permissions for $LOG_DIR"
            exit 1
        fi

        # Start the process directly
        cd "$DESKTOP_COMMANDER_DIR"

        # Use a unique identifier in the command line that will be easy to find in process list
        COMMAND_ID="dc-standalone-$(date +%s)"

        # Change to the Desktop Commander directory
        cd "$DESKTOP_COMMANDER_DIR"

        # Clear any existing nohup.out file
        rm -f nohup.out

        echo "Starting Node.js process with command ID: $COMMAND_ID"

        # Start the process with nohup to ensure it stays running
        # Use a simple, direct command with environment variables
        NODE_OPTIONS="--max-old-space-size=${HEAP_SIZE}" \
        DESKTOP_COMMANDER_MODE="standalone" \
        MEMORY_MONITOR_INTERVAL=30000 \
        MEMORY_THRESHOLD_WARNING=80 \
        MEMORY_THRESHOLD_CRITICAL=90 \
        AUTO_ADJUST_MEMORY=true \
        nohup node dist/index.js --mode=standalone --process-id="$COMMAND_ID" > "$LOG_DIR/standalone-commander.log" 2>&1 &

        # Store the PID
        NODE_PID=$!

        # Save the PID to a file
        PID_FILE="$LOG_DIR/standalone.pid"
        echo $NODE_PID > "$PID_FILE"

        echo "Process started with PID: $NODE_PID"

        # Wait a moment to make sure the process is still running
        sleep 2

        # Verify the process is still running
        if ps -p $NODE_PID > /dev/null; then
            echo "Process verified running with PID: $NODE_PID"
            PID=$NODE_PID
        else
            echo "Process failed to start or terminated immediately"
            PID="unknown"
        fi

        # We've already verified the process is running above

        # If we still couldn't find the process, show a warning
        if [ -z "$PID" ]; then
            echo -e "${YELLOW}Warning: Could not find Node.js process. The process may not have started correctly.${NC}"
            echo "Check the log file at $LOG_DIR/standalone-commander.log for details."
            PID="unknown"
        fi

        # We've already written the PID file above
        # Verify PID file was created
        if [ ! -f "$PID_FILE" ] && [ "$PID" != "unknown" ]; then
            echo -e "${RED}Warning: Could not create PID file at $PID_FILE!${NC}"
            # Try alternative location
            echo "$PID" > "/tmp/dc-standalone.pid"
            echo "Created alternative PID file at /tmp/dc-standalone.pid"
        elif [ -f "$PID_FILE" ]; then
            echo "PID file created successfully at $PID_FILE"
        fi

        echo -e "${GREEN}✅ Desktop Commander started in standalone mode!${NC}"
        echo "   PID: $PID"
        echo "   Log: $LOG_DIR/standalone-commander.log"
        echo "   Memory: ${HEAP_SIZE}MB heap allocated"
        echo ""
        echo -e "${YELLOW}Important: This is your backup configuration.${NC}"
        echo "Desktop Commander is running with all built-in features:"
        echo "  • Task Manager (sequential_thinking/task_manager)"
        echo "  • File operations (read_file, write_file, etc.)"
        echo "  • Terminal operations (execute_command)"
        echo "  • Process management (list_processes, kill_process)"
        echo "  • Dynamic memory management (auto-adjusting)"
        echo ""
        echo "To use with Claude Desktop, configure it to use:"
        echo "  Command: node"
        echo "  Args: $DESKTOP_COMMANDER_DIR/dist/index.js"
        echo ""
        echo -e "${BLUE}Memory monitoring active. View logs for memory adjustments.${NC}"
        ;;

    stop)
        show_header
        echo -e "${YELLOW}Stopping Desktop Commander Standalone...${NC}"

        # Define possible PID file locations
        PID_FILE="$LOG_DIR/standalone.pid"
        ALT_PID_FILE="/tmp/dc-standalone.pid"

        # Read PID from primary file if exists
        if [ -f "$PID_FILE" ]; then
            PID=$(cat "$PID_FILE")
            if ps -p $PID > /dev/null 2>&1; then
                kill $PID
                echo -e "${GREEN}✅ Stopped process $PID${NC}"
            fi
            rm "$PID_FILE"
        fi

        # Check alternative PID file location
        if [ -f "$ALT_PID_FILE" ]; then
            PID=$(cat "$ALT_PID_FILE")
            if ps -p $PID > /dev/null 2>&1; then
                kill $PID
                echo -e "${GREEN}✅ Stopped process $PID (from alternative location)${NC}"
            fi
            rm "$ALT_PID_FILE"
        fi

        # Try to find the process by name - look for our unique identifier or any test process
        RUNNING_PID=$(ps aux | grep "node.*--process-id=dc-standalone-\|node.*--process-id=dc-standalone-test" | grep -v grep | awk '{print $2}' | head -1)
        if [ -n "$RUNNING_PID" ]; then
            kill $RUNNING_PID
            echo -e "${GREEN}✅ Stopped process $RUNNING_PID (detected from process list)${NC}"
        fi

        # Also kill by process name as a fallback
        pkill -f "dc-standalone-runner.sh" 2>/dev/null
        pkill -f "node.*--process-id=dc-standalone-" 2>/dev/null
        pkill -f "node.*--process-id=dc-standalone-test" 2>/dev/null
        # Also kill any Node.js processes in our directory
        pkill -f "node.*$DESKTOP_COMMANDER_DIR/dist/index.js" 2>/dev/null

        # Verify our specific processes are stopped
        if ps aux | grep "dc-standalone-runner.sh\|node.*--process-id=dc-standalone-\|node.*--process-id=dc-standalone-test\|node.*$DESKTOP_COMMANDER_DIR/dist/index.js" | grep -v grep > /dev/null; then
            echo -e "${YELLOW}Warning: Some Desktop Commander processes may still be running.${NC}"
            echo "You may need to manually kill them with:"
            echo "  pkill -f \"dc-standalone-runner.sh\""
            echo "  pkill -f \"node.*--process-id=dc-standalone-\""
            echo "  pkill -f \"node.*--process-id=dc-standalone-test\""
            echo "  pkill -f \"node.*$DESKTOP_COMMANDER_DIR/dist/index.js\""
        else
            echo -e "${GREEN}✅ Desktop Commander stopped!${NC}"
        fi
        ;;

    status)
        show_header
        echo -e "${BLUE}Desktop Commander Standalone Status:${NC}"

        # Define possible PID file locations
        PID_FILE="$LOG_DIR/standalone.pid"
        ALT_PID_FILE="/tmp/dc-standalone.pid"

        # Check if running using primary PID file
        if [ -f "$PID_FILE" ]; then
            PID=$(cat "$PID_FILE")
            if ps -p $PID > /dev/null 2>&1; then
                echo -e "${GREEN}✓ Running${NC}"
                echo "  PID: $PID (from $PID_FILE)"

                # Show memory usage
                MEM_INFO=$(ps -o pid,vsz,rss,pcpu,comm -p $PID | tail -1)
                VSZ=$(echo $MEM_INFO | awk '{print $2}')
                RSS=$(echo $MEM_INFO | awk '{print $3}')
                CPU=$(echo $MEM_INFO | awk '{print $4}')

                echo "  Memory (VSZ): $((VSZ/1024))MB"
                echo "  Memory (RSS): $((RSS/1024))MB"
                echo "  CPU Usage: ${CPU}%"

                # Show recent logs
                if [ -f "$LOG_DIR/standalone-commander.log" ]; then
                    echo ""
                    echo -e "${YELLOW}Recent logs:${NC}"
                    tail -n 5 "$LOG_DIR/standalone-commander.log"
                fi
            else
                echo -e "${RED}✗ Not running (stale PID file)${NC}"
                rm "$PID_FILE"
            fi
        # Check alternative PID file location
        elif [ -f "$ALT_PID_FILE" ]; then
            PID=$(cat "$ALT_PID_FILE")
            if ps -p $PID > /dev/null 2>&1; then
                echo -e "${GREEN}✓ Running${NC}"
                echo "  PID: $PID (from $ALT_PID_FILE)"

                # Show memory usage
                MEM_INFO=$(ps -o pid,vsz,rss,pcpu,comm -p $PID | tail -1)
                VSZ=$(echo $MEM_INFO | awk '{print $2}')
                RSS=$(echo $MEM_INFO | awk '{print $3}')
                CPU=$(echo $MEM_INFO | awk '{print $4}')

                echo "  Memory (VSZ): $((VSZ/1024))MB"
                echo "  Memory (RSS): $((RSS/1024))MB"
                echo "  CPU Usage: ${CPU}%"

                # Show recent logs
                if [ -f "$LOG_DIR/standalone-commander.log" ]; then
                    echo ""
                    echo -e "${YELLOW}Recent logs:${NC}"
                    tail -n 5 "$LOG_DIR/standalone-commander.log"
                fi
            else
                echo -e "${RED}✗ Not running (stale PID file)${NC}"
                rm "$ALT_PID_FILE"
            fi
        # Check for running process even if no PID file exists
        else
            # Try to find the process by name - look for our unique identifier or any test process
            echo "Looking for Desktop Commander processes..."
            ps aux | grep "node.*--process-id=dc-standalone-\|node.*--process-id=dc-standalone-test" | grep -v grep
            RUNNING_PID=$(ps aux | grep "node.*--process-id=dc-standalone-\|node.*--process-id=dc-standalone-test" | grep -v grep | awk '{print $2}' | head -1)

            # If we couldn't find it, try to find any node process in our directory
            if [ -z "$RUNNING_PID" ]; then
                RUNNING_PID=$(ps aux | grep "node.*$DESKTOP_COMMANDER_DIR/dist/index.js" | grep -v grep | awk '{print $2}' | head -1)
            fi
            if [ -n "$RUNNING_PID" ]; then
                echo -e "${YELLOW}✓ Running (PID file missing)${NC}"
                echo "  PID: $RUNNING_PID (detected from process list)"
                echo "  Note: PID file is missing, recreating it now."

                # Recreate the PID file
                mkdir -p "$LOG_DIR"
                echo "$RUNNING_PID" > "$PID_FILE"

                # Show memory usage
                MEM_INFO=$(ps -o pid,vsz,rss,pcpu,comm -p $RUNNING_PID | tail -1)
                VSZ=$(echo $MEM_INFO | awk '{print $2}')
                RSS=$(echo $MEM_INFO | awk '{print $3}')
                CPU=$(echo $MEM_INFO | awk '{print $4}')

                echo "  Memory (VSZ): $((VSZ/1024))MB"
                echo "  Memory (RSS): $((RSS/1024))MB"
                echo "  CPU Usage: ${CPU}%"
            else
                echo -e "${RED}✗ Not running${NC}"
            fi
        fi

        # Show system memory status
        echo ""
        echo -e "${BLUE}System Memory:${NC}"
        check_system_memory

        # Show recommended memory allocation
        echo -e "${BLUE}Recommended Memory Allocation:${NC}"
        echo "  Recommended Heap: $(get_available_memory)MB"

        echo ""
        echo -e "${BLUE}Available capabilities:${NC}"
        echo "  • Task Management & Sequential Thinking"
        echo "  • File System Operations"
        echo "  • Terminal Command Execution"
        echo "  • Process Management"
        echo "  • Code Editing & Search"
        echo "  • Dynamic Memory Management"
        ;;

    logs)
        show_header
        if [ -f "$LOG_DIR/standalone-commander.log" ]; then
            tail -f "$LOG_DIR/standalone-commander.log"
        else
            echo -e "${RED}No logs found${NC}"
        fi
        ;;

    memory)
        show_header
        echo -e "${BLUE}Memory Analysis:${NC}"
        echo ""
        check_system_memory

        echo -e "${BLUE}Recommended Memory Allocation:${NC}"
        echo "  Recommended Heap: $(get_available_memory)MB"

        if [ -f "$LOG_DIR/standalone.pid" ]; then
            PID=$(cat "$LOG_DIR/standalone.pid")
            if ps -p $PID > /dev/null 2>&1; then
                echo ""
                echo -e "${BLUE}Desktop Commander Memory Usage:${NC}"
                ps -o pid,vsz,rss,pcpu,comm -p $PID

                # Check for memory-related log entries
                echo ""
                echo -e "${BLUE}Recent Memory Events:${NC}"
                grep -i "memory\|heap\|gc" "$LOG_DIR/standalone-commander.log" | tail -n 5
            fi
        fi
        ;;

    *)
        show_header
        echo "Desktop Commander Standalone Launcher"
        echo "====================================="
        echo ""
        echo "Usage: $0 {start|stop|status|logs|memory|test}"
        echo ""
        echo "Commands:"
        echo "  start  - Start Desktop Commander with dynamic memory allocation"
        echo "  stop   - Stop Desktop Commander"
        echo "  test   - Run Desktop Commander in foreground mode for testing"
        echo "  status - Show current status, memory usage, and capabilities"
        echo "  logs   - Follow the log output"
        echo "  memory - Analyze memory usage and settings"
        echo ""
        echo "This is your BACKUP configuration that runs Desktop Commander"
        echo "independently without the MCP Router ecosystem."
        echo ""
        echo "Features included:"
        echo "  • Task Manager (sequential_thinking/task_manager)"
        echo "  • File operations"
        echo "  • Terminal operations"
        echo "  • Process management"
        echo "  • Code editing and search"
        echo "  • Dynamic memory management (auto-adjusting based on available RAM)"
        echo ""
        echo "Memory Management:"
        echo "  • Automatically adjusts heap size based on available system memory"
        echo "  • Monitors memory usage and adjusts as needed"
        echo "  • Prevents out-of-memory errors with conservative allocation"
        exit 1
        ;;
esac