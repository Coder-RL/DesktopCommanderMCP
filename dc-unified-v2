#!/bin/bash

# Desktop Commander Unified Control Script V2
DESKTOP_COMMANDER_DIR="/Users/robertlee/GitHubProjects/DesktopCommanderMCP"
MCP_ECOSYSTEM_DIR="/Users/robertlee/GitHubProjects/claude-desktop-mcp-ecosystem"
ROUTER_URL="http://localhost:3099"

# Colors for output
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# ASCII art header
show_header() {
    echo -e "${BLUE}
█▀▄ █▀▀ █▀ █▄▀ ▀█▀ █▀█ █▀█   █▀▀ █▀█ █▀▄▀█ █▀▄▀█ ▄▀█ █▄░█ █▀▄ █▀▀ █▀█
█▄▀ ██▄ ▄█ █░█ ░█░ █▄█ █▀▀ █ █▄▄ █▄█ █░▀░█ █░▀░█ █▀█ █░▀█ █▄▀ ██▄ █▀▄
${NC}"
}

# Function to start everything with aggressive process management
start_all() {
    show_header
    echo -e "${BLUE}==================================================${NC}"
    echo -e "${BLUE}       Starting MCP Ecosystem & Desktop Commander ${NC}"
    echo -e "${BLUE}==================================================${NC}"
    
    # STEP 1: Kill ALL existing processes first
    echo -e "${RED}Killing all existing processes...${NC}"
    pkill -f "node.*mcp-" 2>/dev/null
    pkill -f "node.*desktop-commander" 2>/dev/null
    pkill -f "node.*DesktopCommanderMCP" 2>/dev/null
    pkill -f "node.*claude-desktop-mcp-ecosystem" 2>/dev/null
    pkill -f "chromadb" 2>/dev/null
    pkill -f "python.*mcp-" 2>/dev/null
    pkill -f "vite" 2>/dev/null
    sleep 3
    
    # STEP 2: Build Desktop Commander if needed
    if [ ! -f "$DESKTOP_COMMANDER_DIR/dist/index.js" ]; then
        echo -e "${YELLOW}Building Desktop Commander...${NC}"
        cd "$DESKTOP_COMMANDER_DIR"
        npm run build
        if [ $? -ne 0 ]; then
            echo -e "${RED}Failed to build Desktop Commander${NC}"
            return 1
        fi
    fi
    
    # STEP 3: Handle ChromaDB - Check Docker first
    echo -e "${YELLOW}Setting up ChromaDB...${NC}"
    
    # Check if ChromaDB is in Docker
    CHROMADB_CONTAINER=$(docker ps -q -f name=chroma)
    if [ -z "$CHROMADB_CONTAINER" ]; then
        CHROMADB_CONTAINER=$(docker ps -q -f name=chromadb)
    fi
    
    if [ ! -z "$CHROMADB_CONTAINER" ]; then
        echo -e "${GREEN}Found ChromaDB in Docker${NC}"
        
        # Get port mapping
        CHROMADB_PORT=$(docker port $CHROMADB_CONTAINER 8000/tcp 2>/dev/null | cut -d: -f2)
        if [ -z "$CHROMADB_PORT" ]; then
            CHROMADB_PORT="8000"
        fi
        
        CHROMADB_URL="http://localhost:$CHROMADB_PORT"
        echo "ChromaDB URL: $CHROMADB_URL"
        
        # Test if it's accessible
        if ! curl -s "$CHROMADB_URL/api/v1" > /dev/null 2>&1; then
            echo -e "${YELLOW}Docker ChromaDB not responding, restarting...${NC}"
            docker restart $CHROMADB_CONTAINER
            sleep 5
        fi
    else
        # No Docker ChromaDB, start native
        echo -e "${YELLOW}Starting native ChromaDB...${NC}"
        mkdir -p "$MCP_ECOSYSTEM_DIR/data/chroma"
        cd "$MCP_ECOSYSTEM_DIR/data/chroma"
        
        CHROMA_SERVER_SSL_ENABLED=false \
        CHROMA_SERVER_HOST=0.0.0.0 \
        CHROMA_SERVER_PORT=8000 \
        chromadb run --path . > "$MCP_ECOSYSTEM_DIR/logs/chromadb.log" 2>&1 &
        
        CHROMADB_URL="http://localhost:8000"
        sleep 5
    fi
    
    # STEP 4: Update ecosystem configuration with ChromaDB URL
    echo -e "${YELLOW}Updating ecosystem configuration...${NC}"
    cat > "$MCP_ECOSYSTEM_DIR/.env" << EOF
CHROMADB_URL=$CHROMADB_URL
CHROMADB_HOST=localhost
CHROMADB_PORT=${CHROMADB_PORT:-8000}
NODE_OPTIONS=--max-old-space-size=4096
EOF
    
    # Export for current session
    export CHROMADB_URL
    export CHROMADB_HOST=localhost
    export CHROMADB_PORT=${CHROMADB_PORT:-8000}
    
    # STEP 5: Launch the MCP ecosystem with our ChromaDB configuration
    echo -e "${YELLOW}Starting MCP Router ecosystem...${NC}"
    cd "$MCP_ECOSYSTEM_DIR"
    
    # Pass our ChromaDB configuration to the launch script
    CHROMADB_URL=$CHROMADB_URL \
    CHROMADB_HOST=localhost \
    CHROMADB_PORT=${CHROMADB_PORT:-8000} \
    ./launch-claude-desktop-enhanced.sh &
    
    # STEP 6: Wait for router to be ready
    echo -e "${YELLOW}Waiting for MCP Router to be ready...${NC}"
    for i in {1..30}; do
        if curl -s "$ROUTER_URL/health" | grep -q "ok"; then
            echo -e "${GREEN}MCP Router is ready!${NC}"
            break
        fi
        sleep 1
    done
    
    # STEP 7: Register Desktop Commander
    echo -e "${YELLOW}Registering Desktop Commander with MCP Router...${NC}"
    
    REGISTRATION_DATA='{
        "id": "desktop-commander",
        "name": "Desktop Commander MCP",
        "transport": {
            "type": "stdio",
            "command": "node",
            "args": ["'$DESKTOP_COMMANDER_DIR'/dist/index.js"]
        },
        "capabilities": [
            "file_operations",
            "terminal_commands",
            "process_management",
            "code_editing",
            "task_management",
            "sequential_thinking"
        ],
        "description": "Integrated Desktop Commander with Task Manager and Sequential Thinking",
        "status": "active"
    }'
    
    RESPONSE=$(curl -s -X POST \
        -H "Content-Type: application/json" \
        -d "$REGISTRATION_DATA" \
        "$ROUTER_URL/register")
    
    if echo "$RESPONSE" | grep -q "success"; then
        echo -e "${GREEN}✅ Desktop Commander registered successfully${NC}"
    else
        echo -e "${RED}❌ Failed to register Desktop Commander${NC}"
        echo "Response: $RESPONSE"
    fi
    
    echo -e "${GREEN}==================================================${NC}"
    echo -e "${GREEN}   MCP Ecosystem and Desktop Commander Started!   ${NC}"
    echo -e "${GREEN}==================================================${NC}"
    echo ""
    echo "ChromaDB: $CHROMADB_URL"
    echo "Dashboard: http://localhost:3001"
    echo "MCP Router: http://localhost:3099"
    echo ""
    echo -e "${YELLOW}Please restart Claude Desktop to use the enhanced system${NC}"
}

# Function to stop everything
stop_all() {
    show_header
    echo -e "${BLUE}==================================================${NC}"
    echo -e "${BLUE}       Stopping MCP Ecosystem & Desktop Commander ${NC}"
    echo -e "${BLUE}==================================================${NC}"
    
    # Use the ecosystem's stop script first
    echo -e "${YELLOW}Stopping MCP ecosystem...${NC}"
    cd "$MCP_ECOSYSTEM_DIR"
    if [ -f "./stop-all-services.sh" ]; then
        ./stop-all-services.sh
    fi
    
    # Then force kill everything
    echo -e "${YELLOW}Force killing all processes...${NC}"
    pkill -f "node.*DesktopCommanderMCP" 2>/dev/null
    pkill -f "node.*mcp-" 2>/dev/null
    pkill -f "node.*simple_router.js" 2>/dev/null
    pkill -f "node.*dashboard" 2>/dev/null
    pkill -f "chromadb" 2>/dev/null
    pkill -f "python.*mcp-" 2>/dev/null
    
    echo -e "${GREEN}==================================================${NC}"
    echo -e "${GREEN}   MCP Ecosystem and Desktop Commander Stopped!   ${NC}"
    echo -e "${GREEN}==================================================${NC}"
}

# Function to show status
show_status() {
    show_header
    echo -e "${BLUE}==================================================${NC}"
    echo -e "${BLUE}                System Status                     ${NC}"
    echo -e "${BLUE}==================================================${NC}"
    
    # Check Desktop Commander build
    if [ -f "$DESKTOP_COMMANDER_DIR/dist/index.js" ]; then
        echo -e "${GREEN}✓ Desktop Commander: BUILT${NC}"
    else
        echo -e "${RED}✗ Desktop Commander: NOT BUILT${NC}"
    fi
    
    # Check ChromaDB
    echo -n "ChromaDB: "
    if docker ps | grep -q "chroma"; then
        echo -e "${GREEN}Running in Docker${NC}"
    elif curl -s http://localhost:8000/api/v1 > /dev/null 2>&1; then
        echo -e "${GREEN}Running natively${NC}"
    else
        echo -e "${RED}NOT RUNNING${NC}"
    fi
    
    # Check MCP Router
    if curl -s "$ROUTER_URL/health" | grep -q "ok"; then
        echo -e "${GREEN}✓ MCP Router: RUNNING${NC}"
        
        if curl -s "$ROUTER_URL/servers/desktop-commander" | grep -q "desktop-commander"; then
            echo -e "${GREEN}✓ Desktop Commander: REGISTERED${NC}"
        else
            echo -e "${YELLOW}⚠ Desktop Commander: NOT REGISTERED${NC}"
        fi
    else
        echo -e "${RED}✗ MCP Router: NOT RUNNING${NC}"
    fi
    
    echo -e "${BLUE}==================================================${NC}"
}

# Main command handling
case "$1" in
    start)
        start_all
        ;;
    stop)
        stop_all
        ;;
    restart)
        stop_all
        sleep 2
        start_all
        ;;
    status)
        show_status
        ;;
    build)
        echo -e "${YELLOW}Building Desktop Commander...${NC}"
        cd "$DESKTOP_COMMANDER_DIR"
        npm run build
        ;;
    *)
        show_header
        echo "Desktop Commander Unified Control V2"
        echo "==================================="
        echo ""
        echo "Usage: dc {start|stop|restart|status|build}"
        echo ""
        echo "Commands:"
        echo "  start   - Kill all processes, then start everything"
        echo "  stop    - Stop everything"
        echo "  restart - Restart everything"
        echo "  status  - Show system status"
        echo "  build   - Build Desktop Commander"
        echo ""
        echo "This version aggressively kills all processes before starting"
        echo "and properly handles Docker ChromaDB configurations."
        echo ""
        exit 1
        ;;
esac