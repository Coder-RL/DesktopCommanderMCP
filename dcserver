#!/bin/bash

# Desktop Commander MCP Server Control Script
SCRIPT_DIR="/Users/robertlee/GitHubProjects/DesktopCommanderMCP"
SERVER_SCRIPT="$SCRIPT_DIR/dist/index.js"
PID_FILE="$SCRIPT_DIR/server.pid"
LOG_FILE="$SCRIPT_DIR/logs/server.log"

# Ensure logs directory exists
mkdir -p "$SCRIPT_DIR/logs"

# Function to check if server is running
is_running() {
    if [ -f "$PID_FILE" ]; then
        PID=$(cat "$PID_FILE")
        if ps -p $PID > /dev/null 2>&1; then
            return 0
        fi
    fi
    return 1
}

# Function to start the server
start_server() {
    if is_running; then
        echo "Desktop Commander MCP Server is already running (PID: $(cat $PID_FILE))"
        return 1
    fi
    
    echo "Starting Desktop Commander MCP Server..."
    
    # Kill any orphaned instances
    pkill -f "node.*DesktopCommanderMCP/dist/index.js" 2>/dev/null
    
    # Start the server
    NODE_ENV=production nohup node "$SERVER_SCRIPT" > "$LOG_FILE" 2>&1 &
    echo $! > "$PID_FILE"
    
    sleep 1  # Give the server a moment to start
    
    if is_running; then
        echo "Desktop Commander MCP Server started successfully"
        echo "PID: $(cat $PID_FILE)"
        echo "Logs: $LOG_FILE"
        echo "Run: 'dcserver stop' to stop the server"
        echo "Run: 'dcserver logs' to view logs"
        echo "Run: 'dcserver status' to check status"
    else
        echo "Failed to start Desktop Commander MCP Server"
        echo "Check logs at: $LOG_FILE"
        return 1
    fi
}

# Function to stop the server
stop_server() {
    if ! is_running; then
        echo "Desktop Commander MCP Server is not running"
        # Clean up any orphaned instances
        pkill -f "node.*DesktopCommanderMCP/dist/index.js" 2>/dev/null
        rm -f "$PID_FILE"
        return 0
    fi
    
    echo "Stopping Desktop Commander MCP Server..."
    PID=$(cat "$PID_FILE")
    kill $PID
    
    # Wait up to 5 seconds for graceful shutdown
    for i in {1..5}; do
        if ! is_running; then
            echo "Desktop Commander MCP Server stopped successfully"
            rm -f "$PID_FILE"
            return 0
        fi
        sleep 1
    done
    
    # Force kill if needed
    echo "Force stopping..."
    kill -9 $PID 2>/dev/null
    rm -f "$PID_FILE"
    echo "Desktop Commander MCP Server force stopped"
}

# Function to restart the server
restart_server() {
    stop_server
    sleep 1
    start_server
}

# Function to show server status
show_status() {
    if is_running; then
        PID=$(cat "$PID_FILE")
        echo "Desktop Commander MCP Server is RUNNING"
        echo "PID: $PID"
        echo "Uptime: $(ps -o etime= -p $PID | xargs)"
        echo "Logs: $LOG_FILE"
    else
        echo "Desktop Commander MCP Server is STOPPED"
    fi
}

# Function to show logs
show_logs() {
    if [ -f "$LOG_FILE" ]; then
        tail -f "$LOG_FILE"
    else
        echo "No log file found at: $LOG_FILE"
    fi
}

# Main command handling
case "$1" in
    start)
        start_server
        ;;
    stop)
        stop_server
        ;;
    restart)
        restart_server
        ;;
    status)
        show_status
        ;;
    logs)
        show_logs
        ;;
    *)
        echo "Desktop Commander MCP Server Control"
        echo "Usage: $0 {start|stop|restart|status|logs}"
        echo ""
        echo "Commands:"
        echo "  start   - Start the server"
        echo "  stop    - Stop the server"
        echo "  restart - Restart the server"
        echo "  status  - Show server status"
        echo "  logs    - Show server logs (tail -f)"
        echo ""
        echo "Server location: $SCRIPT_DIR"
        exit 1
        ;;
esac