#!/bin/bash

# Desktop Commander Unified Control Script V4 - With Integrated Docker Service Checks
DESKTOP_COMMANDER_DIR="/Users/robertlee/GitHubProjects/DesktopCommanderMCP"
MCP_ECOSYSTEM_DIR="/Users/robertlee/GitHubProjects/claude-desktop-mcp-ecosystem"
ROUTER_URL="http://localhost:3099"

# Colors for output
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# ASCII art header
show_header() {
    echo -e "${BLUE}
█▀▄ █▀▀ █▀ █▄▀ ▀█▀ █▀█ █▀█   █▀▀ █▀█ █▀▄▀█ █▀▄▀█ ▄▀█ █▄░█ █▀▄ █▀▀ █▀█
█▄▀ ██▄ ▄█ █░█ ░█░ █▄█ █▀▀ █ █▄▄ █▄█ █░▀░█ █░▀░█ █▀█ █░▀█ █▄▀ ██▄ █▀▄
${NC}"
}

# Function to check and display Docker services status
check_docker_services() {
    echo -e "${BLUE}==================================================${NC}"
    echo -e "${BLUE}         Docker Services Status Check             ${NC}"
    echo -e "${BLUE}==================================================${NC}"
    
    # Show all running containers
    echo -e "${YELLOW}Running Docker containers:${NC}"
    docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
    echo ""
    
    # Check ChromaDB
    echo -e "${YELLOW}ChromaDB Status:${NC}"
    CHROMA_CONTAINER=$(docker ps -q -f name=chroma)
    if [ -z "$CHROMA_CONTAINER" ]; then
        CHROMA_CONTAINER=$(docker ps -q -f name=chromadb)
    fi
    
    if [ ! -z "$CHROMA_CONTAINER" ]; then
        CHROMA_PORT=$(docker port $CHROMA_CONTAINER 8000/tcp 2>/dev/null | cut -d: -f2)
        echo -e "${GREEN}✓ Container found (port $CHROMA_PORT)${NC}"
        
        # Test API
        if curl -s http://localhost:$CHROMA_PORT/api/v1 > /dev/null 2>&1; then
            echo -e "${GREEN}✓ API responding${NC}"
        else
            echo -e "${RED}✗ API not responding${NC}"
            echo "Recent logs:"
            docker logs --tail 5 $CHROMA_CONTAINER
        fi
    else
        echo -e "${RED}✗ Not found in Docker${NC}"
    fi
    echo ""
    
    # Check OpenSearch
    echo -e "${YELLOW}OpenSearch Status:${NC}"
    OPENSEARCH_CONTAINER=$(docker ps -q -f name=opensearch)
    
    if [ ! -z "$OPENSEARCH_CONTAINER" ]; then
        OPENSEARCH_PORT=$(docker port $OPENSEARCH_CONTAINER 9200/tcp 2>/dev/null | cut -d: -f2)
        echo -e "${GREEN}✓ Container found (port $OPENSEARCH_PORT)${NC}"
        
        # Test API
        if curl -s http://localhost:$OPENSEARCH_PORT > /dev/null 2>&1; then
            echo -e "${GREEN}✓ API responding${NC}"
            # Show cluster health
            HEALTH=$(curl -s http://localhost:$OPENSEARCH_PORT/_cluster/health | python3 -c "import sys, json; data=json.load(sys.stdin); print(data['status'])" 2>/dev/null)
            echo -e "${GREEN}✓ Cluster health: $HEALTH${NC}"
        else
            echo -e "${RED}✗ API not responding${NC}"
            echo "Recent logs:"
            docker logs --tail 5 $OPENSEARCH_CONTAINER
        fi
    else
        echo -e "${RED}✗ Not found in Docker${NC}"
    fi
    echo ""
}

# Function to start everything with integrated checks
start_all() {
    show_header
    echo -e "${BLUE}==================================================${NC}"
    echo -e "${BLUE}       Starting MCP Ecosystem & Desktop Commander ${NC}"
    echo -e "${BLUE}==================================================${NC}"
    
    # STEP 1: Check Docker services first
    check_docker_services
    
    # STEP 2: Kill ALL existing processes
    echo -e "${RED}Killing all existing processes...${NC}"
    pkill -f "node.*mcp-" 2>/dev/null
    pkill -f "node.*desktop-commander" 2>/dev/null
    pkill -f "node.*DesktopCommanderMCP" 2>/dev/null
    pkill -f "node.*claude-desktop-mcp-ecosystem" 2>/dev/null
    pkill -f "chromadb" 2>/dev/null
    pkill -f "opensearch" 2>/dev/null
    pkill -f "python.*mcp-" 2>/dev/null
    pkill -f "vite" 2>/dev/null
    sleep 3
    
    # STEP 3: Build Desktop Commander if needed
    if [ ! -f "$DESKTOP_COMMANDER_DIR/dist/index.js" ]; then
        echo -e "${YELLOW}Building Desktop Commander...${NC}"
        cd "$DESKTOP_COMMANDER_DIR"
        npm run build
        if [ $? -ne 0 ]; then
            echo -e "${RED}Failed to build Desktop Commander${NC}"
            return 1
        fi
    fi
    
    # STEP 4: Handle ChromaDB - Check Docker first
    echo -e "${YELLOW}Setting up ChromaDB...${NC}"
    
    # Check if ChromaDB is in Docker
    CHROMADB_CONTAINER=$(docker ps -q -f name=chroma)
    if [ -z "$CHROMADB_CONTAINER" ]; then
        CHROMADB_CONTAINER=$(docker ps -q -f name=chromadb)
    fi
    
    if [ ! -z "$CHROMADB_CONTAINER" ]; then
        echo -e "${GREEN}Using Docker ChromaDB${NC}"
        
        # Get port mapping
        CHROMADB_PORT=$(docker port $CHROMADB_CONTAINER 8000/tcp 2>/dev/null | cut -d: -f2)
        if [ -z "$CHROMADB_PORT" ]; then
            CHROMADB_PORT="8000"
        fi
        
        CHROMADB_URL="http://localhost:$CHROMADB_PORT"
        echo "ChromaDB URL: $CHROMADB_URL"
        
        # Test if it's accessible
        if ! curl -s "$CHROMADB_URL/api/v1" > /dev/null 2>&1; then
            echo -e "${YELLOW}Docker ChromaDB not responding, restarting...${NC}"
            docker restart $CHROMADB_CONTAINER
            echo -n "Waiting for ChromaDB to be ready..."
            for i in {1..30}; do
                if curl -s "$CHROMADB_URL/api/v1" > /dev/null 2>&1; then
                    echo -e " ${GREEN}READY${NC}"
                    break
                fi
                echo -n "."
                sleep 1
            done
        fi
    else
        # No Docker ChromaDB, start native
        echo -e "${YELLOW}Starting native ChromaDB...${NC}"
        mkdir -p "$MCP_ECOSYSTEM_DIR/data/chroma"
        cd "$MCP_ECOSYSTEM_DIR/data/chroma"
        
        CHROMA_SERVER_SSL_ENABLED=false \
        CHROMA_SERVER_HOST=0.0.0.0 \
        CHROMA_SERVER_PORT=8000 \
        chroma run --path . > "$MCP_ECOSYSTEM_DIR/logs/chromadb.log" 2>&1 &
        
        CHROMADB_URL="http://localhost:8000"
        sleep 5
    fi
    
    # STEP 5: Handle OpenSearch - Check Docker first
    echo -e "${YELLOW}Setting up OpenSearch...${NC}"
    
    # Check if OpenSearch is in Docker
    OPENSEARCH_CONTAINER=$(docker ps -q -f name=opensearch)
    
    if [ ! -z "$OPENSEARCH_CONTAINER" ]; then
        echo -e "${GREEN}Using Docker OpenSearch${NC}"
        
        # Get port mapping
        OPENSEARCH_PORT=$(docker port $OPENSEARCH_CONTAINER 9200/tcp 2>/dev/null | cut -d: -f2)
        if [ -z "$OPENSEARCH_PORT" ]; then
            OPENSEARCH_PORT="9200"
        fi
        
        OPENSEARCH_URL="http://localhost:$OPENSEARCH_PORT"
        echo "OpenSearch URL: $OPENSEARCH_URL"
        
        # Test if it's accessible
        if ! curl -s "$OPENSEARCH_URL" > /dev/null 2>&1; then
            echo -e "${YELLOW}Docker OpenSearch not responding, restarting...${NC}"
            docker restart $OPENSEARCH_CONTAINER
            
            # Wait for OpenSearch to be ready (it takes longer)
            echo -n "Waiting for OpenSearch to be ready..."
            for i in {1..60}; do
                if curl -s "$OPENSEARCH_URL" > /dev/null 2>&1; then
                    echo -e " ${GREEN}READY${NC}"
                    break
                fi
                echo -n "."
                sleep 1
            done
        else
            echo -e "${GREEN}OpenSearch is accessible${NC}"
        fi
    else
        # No Docker OpenSearch, try to start it in Docker
        echo -e "${YELLOW}OpenSearch not found. Starting in Docker...${NC}"
        
        # Check if container already exists but is stopped
        if docker ps -a | grep -q "opensearch"; then
            echo -e "${YELLOW}Found existing OpenSearch container, starting it...${NC}"
            docker start opensearch
        else
            # Pull image if needed
            docker pull opensearchproject/opensearch:latest
            
            docker run -d \
                --name opensearch \
                -p 9200:9200 \
                -p 9600:9600 \
                -e "discovery.type=single-node" \
                -e "DISABLE_SECURITY_PLUGIN=true" \
                -e "bootstrap.memory_lock=true" \
                -e "OPENSEARCH_JAVA_OPTS=-Xms512m -Xmx512m" \
                -v opensearch-data:/usr/share/opensearch/data \
                opensearchproject/opensearch:latest
        fi
        
        OPENSEARCH_URL="http://localhost:9200"
        
        # Wait for it to start
        echo -n "Waiting for OpenSearch to start..."
        for i in {1..60}; do
            if curl -s "$OPENSEARCH_URL" > /dev/null 2>&1; then
                echo -e " ${GREEN}READY${NC}"
                break
            fi
            echo -n "."
            sleep 1
        done
    fi
    
    # STEP 6: Update ecosystem configuration with both URLs
    echo -e "${YELLOW}Updating ecosystem configuration...${NC}"
    cat > "$MCP_ECOSYSTEM_DIR/.env" << EOF
CHROMADB_URL=$CHROMADB_URL
CHROMADB_HOST=localhost
CHROMADB_PORT=${CHROMADB_PORT:-8000}
OPENSEARCH_URL=$OPENSEARCH_URL
OPENSEARCH_HOST=localhost
OPENSEARCH_PORT=${OPENSEARCH_PORT:-9200}
NODE_OPTIONS=--max-old-space-size=4096
MCP_SHARED_SECRET=supersecret
EOF
    
    # Export for current session
    export CHROMADB_URL
    export CHROMADB_HOST=localhost
    export CHROMADB_PORT=${CHROMADB_PORT:-8000}
    export OPENSEARCH_URL
    export OPENSEARCH_HOST=localhost
    export OPENSEARCH_PORT=${OPENSEARCH_PORT:-9200}
    export MCP_SHARED_SECRET=supersecret
    
    # STEP 7: Launch the MCP ecosystem with our configuration
    echo -e "${YELLOW}Starting MCP Router ecosystem...${NC}"
    cd "$MCP_ECOSYSTEM_DIR"
    
    # Pass our configuration to the launch script
    CHROMADB_URL=$CHROMADB_URL \
    CHROMADB_HOST=localhost \
    CHROMADB_PORT=${CHROMADB_PORT:-8000} \
    OPENSEARCH_URL=$OPENSEARCH_URL \
    OPENSEARCH_HOST=localhost \
    OPENSEARCH_PORT=${OPENSEARCH_PORT:-9200} \
    ./launch-claude-desktop-enhanced.sh &
    
    # STEP 8: Wait for router to be ready
    echo -e "${YELLOW}Waiting for MCP Router to be ready...${NC}"
    for i in {1..30}; do
        if curl -s "$ROUTER_URL/health" | grep -q "ok"; then
            echo -e "${GREEN}MCP Router is ready!${NC}"
            break
        fi
        sleep 1
    done
    
    # STEP 9: Register Desktop Commander
    echo -e "${YELLOW}Registering Desktop Commander with MCP Router...${NC}"
    
    REGISTRATION_DATA='{
        "id": "desktop-commander",
        "name": "Desktop Commander MCP",
        "transport": {
            "type": "stdio",
            "command": "node",
            "args": ["'$DESKTOP_COMMANDER_DIR'/dist/index.js"]
        },
        "capabilities": [
            "file_operations",
            "terminal_commands",
            "process_management",
            "code_editing",
            "task_management",
            "sequential_thinking"
        ],
        "description": "Integrated Desktop Commander with Task Manager and Sequential Thinking",
        "status": "active"
    }'
    
    RESPONSE=$(curl -s -X POST \
        -H "Content-Type: application/json" \
        -d "$REGISTRATION_DATA" \
        "$ROUTER_URL/register")
    
    if echo "$RESPONSE" | grep -q "success"; then
        echo -e "${GREEN}✅ Desktop Commander registered successfully${NC}"
    else
        echo -e "${RED}❌ Failed to register Desktop Commander${NC}"
        echo "Response: $RESPONSE"
    fi
    
    # STEP 10: Final service summary
    echo -e "${GREEN}==================================================${NC}"
    echo -e "${GREEN}   MCP Ecosystem and Desktop Commander Started!   ${NC}"
    echo -e "${GREEN}==================================================${NC}"
    echo ""
    echo "Service URLs:"
    echo "  ChromaDB: $CHROMADB_URL"
    echo "  OpenSearch: $OPENSEARCH_URL"
    echo "  Dashboard: http://localhost:3001"
    echo "  MCP Router: http://localhost:3099"
    echo ""
    echo -e "${YELLOW}Please restart Claude Desktop to use the enhanced system${NC}"
}

# Function to stop everything
stop_all() {
    show_header
    echo -e "${BLUE}==================================================${NC}"
    echo -e "${BLUE}       Stopping MCP Ecosystem & Desktop Commander ${NC}"
    echo -e "${BLUE}==================================================${NC}"
    
    # Show what's running before stopping
    echo -e "${YELLOW}Current Docker services:${NC}"
    docker ps --format "table {{.Names}}\t{{.Status}}" | grep -E "chroma|opensearch|NAMES" || echo "None"
    echo ""
    
    # Use the ecosystem's stop script first
    echo -e "${YELLOW}Stopping MCP ecosystem...${NC}"
    cd "$MCP_ECOSYSTEM_DIR"
    if [ -f "./stop-all-services.sh" ]; then
        ./stop-all-services.sh
    fi
    
    # Then force kill everything
    echo -e "${YELLOW}Force killing all processes...${NC}"
    pkill -f "node.*DesktopCommanderMCP" 2>/dev/null
    pkill -f "node.*mcp-" 2>/dev/null
    pkill -f "node.*simple_router.js" 2>/dev/null
    pkill -f "node.*dashboard" 2>/dev/null
    pkill -f "chromadb" 2>/dev/null
    pkill -f "opensearch" 2>/dev/null
    pkill -f "python.*mcp-" 2>/dev/null
    
    echo -e "${GREEN}==================================================${NC}"
    echo -e "${GREEN}   MCP Ecosystem and Desktop Commander Stopped!   ${NC}"
    echo -e "${GREEN}==================================================${NC}"
    
    # Show final Docker status
    echo -e "${YELLOW}Remaining Docker services:${NC}"
    docker ps --format "table {{.Names}}\t{{.Status}}" | grep -E "chroma|opensearch|NAMES" || echo "None"
}

# Function to show status (includes Docker check)
show_status() {
    show_header
    echo -e "${BLUE}==================================================${NC}"
    echo -e "${BLUE}                System Status                     ${NC}"
    echo -e "${BLUE}==================================================${NC}"
    
    # Check Desktop Commander build
    if [ -f "$DESKTOP_COMMANDER_DIR/dist/index.js" ]; then
        echo -e "${GREEN}✓ Desktop Commander: BUILT${NC}"
    else
        echo -e "${RED}✗ Desktop Commander: NOT BUILT${NC}"
    fi
    
    # Check Docker services
    echo ""
    check_docker_services
    
    # Check MCP Router
    echo -e "${YELLOW}MCP Router Status:${NC}"
    if curl -s "$ROUTER_URL/health" | grep -q "ok"; then
        echo -e "${GREEN}✓ Running${NC}"
        
        if curl -s "$ROUTER_URL/servers/desktop-commander" | grep -q "desktop-commander"; then
            echo -e "${GREEN}✓ Desktop Commander registered${NC}"
        else
            echo -e "${YELLOW}⚠ Desktop Commander not registered${NC}"
        fi
    else
        echo -e "${RED}✗ Not running${NC}"
    fi
    
    echo -e "${BLUE}==================================================${NC}"
}

# Main command handling
case "$1" in
    start)
        start_all
        ;;
    stop)
        stop_all
        ;;
    restart)
        stop_all
        sleep 2
        start_all
        ;;
    status)
        show_status
        ;;
    build)
        echo -e "${YELLOW}Building Desktop Commander...${NC}"
        cd "$DESKTOP_COMMANDER_DIR"
        npm run build
        ;;
    check)
        check_docker_services
        ;;
    *)
        show_header
        echo "Desktop Commander Unified Control V4"
        echo "==================================="
        echo ""
        echo "Usage: dc {start|stop|restart|status|build|check}"
        echo ""
        echo "Commands:"
        echo "  start   - Check services, then start everything"
        echo "  stop    - Stop everything"
        echo "  restart - Full restart"
        echo "  status  - Show complete system status"
        echo "  build   - Build Desktop Commander"
        echo "  check   - Check Docker services only"
        echo ""
        echo "V4 includes integrated Docker service checks in all commands"
        echo ""
        exit 1
        ;;
esac